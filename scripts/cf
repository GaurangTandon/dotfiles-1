#!/usr/bin/env python3

#   Script to automatically 
#   1. get the test cases visible in codeforces
#   2. save my code, compile and run it against the mentioned test cases
#   3. compare my code's output with the one provided and report,
#   given the 
#       - name of the file[Acc to my convention, CF_probCode.c<pp>]
#       - full path of the .c<pp> file
#   Works best with vim

import sys
import os
import re
import bs4 as bs
import requests

# name of the file
name = sys.argv[1]

# full path to the fle
f_name = sys.argv[2]

# name of the executable
exec_name = ".run"

# compiler settings
prog_name = "g"

if name[-1] == 'c':
    prog_name += "cc"
else:
    prog_name += "++"

# compiling with all the necessary flags
os.system(prog_name + " " + f_name + " -o " + exec_name + " -Wall -g")

# getting the problem number and code
s = re.search('_', name)
e = re.search('\.', name)

prob = name[s.start() + 1:e.start()]
code = prob[-1:]
prob = prob[:-1]

url = "https://codeforces.com/problemset/problem/" + prob + "/" + code

# getting the page source code
src = requests.get(url).text

soup = bs.BeautifulSoup(src, 'html.parser')

# div containing all the sample test cases
sample_test = soup.find('div', {'class': 'sample-test'})

# getting test input and output
tests_in = sample_test.find_all('div', {'class': 'input'})
tests_out = sample_test.find_all('div', {'class': 'output'})

# saving input files
inp_count = 0

for _in in tests_in:
    _file = open(".__in_file" + str(inp_count), "w")

    for line in _in.find('pre').contents:
        if not re.search('<', str(line)):
            _file.write(str(line) + '\n')

    _file.close()

    clean = "sed -i '/^$/d' .__in_file" + str(inp_count)
    os.system(clean)

    inp_count += 1

out_count = 0

# saving output files
for _in in tests_out:
    _file = open(".__out_file" + str(out_count), "w")

    for line in _in.find('pre').contents:
        if not re.search('<', str(line)):
            _file.write(str(line) + '\n')

    _file.close()

    clean = "sed -i '/^$/d' .__out_file" + str(out_count)
    os.system(clean)

    out_count += 1

# executing my code and comparing outputs
for i in range(inp_count):
    command = "./" + exec_name + " < .__in_file" + str(i) + " > .__out" + str(i)

    os.system(command)

    clean = "sed -i '/^$/d' .__out" + str(i)
    os.system(command)

    exit_code = os.system("diff --ignore-all-space -B .__out_file" + str(i) + " .__out" + str(i) + " > /dev/null")

    if exit_code != 0:
        print("Wrong Answer on test " + str(i + 1))
        _wrong_test_in = open(".__in_file" + str(i))
        _wrong_test_out = open(".__out_file" + str(i))
        _wrong_ans = open(".__out" + str(i))

        print("\n+-----+\n|Input|\n+-----+")
        for l in _wrong_test_in:
            if l.strip():
                print(l, end='')

        print("\n+-------+\n|Correct|\n+-------+")
        for l in _wrong_test_out:
            if l.strip():
                print(l, end='')

        print("\n+----+\n|Your|\n+----+")
        for l in _wrong_ans:
            if l.strip():
                print(l, end='')

        print('\n')
    else:
        print("Passed test " + str(i + 1))

# cleanup
os.system("rm .run")
for i in range(inp_count):
    os.system("rm .__in_file" + str(i))
    os.system("rm .__out_file" + str(i))
    os.system("rm .__out" + str(i))

